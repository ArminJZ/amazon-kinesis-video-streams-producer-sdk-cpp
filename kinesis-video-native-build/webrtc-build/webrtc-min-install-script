#!/bin/bash

# Install the open source dependencies for the following SDK:
#
#    kinesis-video-streams-webrtc-sdk-c
# 

# Use apt-get install for the GStreamer OpenSSL and libraries
#  

set -e

# KINESIS_VIDEO_WEBRTC_ROOT should point to kinesis-video-webrtc-native-build directory
if [ -z $KINESIS_VIDEO_WEBRTC_ROOT ]; then
  KINESIS_VIDEO_WEBRTC_ROOT=`pwd`
fi

if [[ ! $KINESIS_VIDEO_WEBRTC_ROOT =~ kinesis-video-native-build$ ]]; then
  echo "Please set KINESIS_VIDEO_WEBRTC_ROOT environment variable to /path/to/kvssdk/kinesis-video-native-build or run the min-install-script inside kinesis-video-webrtc-native-build directory"
  exit 1
fi

source $KINESIS_VIDEO_WEBRTC_ROOT/webrtc-install-script-common.sh

# --------- process args -----------------------------------------------------
max_parallel=2
build_type=Release
build_test=FALSE
build_gst_artifact=TRUE
build_jni_only=FALSE
build_producer=TRUE
env_var=""
cmake_args=""
on_rpi=FALSE
parse_args $@

setup

# check if we are on raspberry pi. If so then direct user to use min-install-script
if [[ -e /proc/device-tree/model ]]; then
    model=$(tr -d '\0' </proc/device-tree/model)
    if [[ "$model" =~ ^Raspberry ]]; then
        on_rpi=TRUE
    fi
fi

# --------- check platform -----------------------------------------------------
PLATFORM='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
   PLATFORM='linux'
   echo "======= make sure the following libraries have been installed ======="
   echo "* pkg-config"
   echo "* libssl-dev"
   echo "* cmake"
   echo "* libgstreamer1.0-dev"
   echo "* libgstreamer-plugins-base1.0-dev"
   echo "* gstreamer1.0-plugins-base-apps"
   echo "* gstreamer1.0-plugins-bad"
   echo "* gstreamer1.0-plugins-good"
   echo "* gstreamer1.0-plugins-ugly"
   echo "* gstreamer1.0-omx (if on raspberry pi)"
   echo "* gstreamer1.0-tools"
   echo "* libcurl4-openssl-dev"
   echo "* liblog4cplus-1.1-9"
   echo "* liblog4cplus-dev"
   echo "* libsrtp2"

elif [[ "$unamestr" =~ ^MINGW ]]; then
    PLATFORM='mingw'

    if [[ "$unamestr" =~ ^MINGW64 ]]; then
      if [[ ! -d ${MINGW_PREFIX}/lib/gstreamer-1.0 ]]; then
        echo "Installing dependencies"
        pacman -S --needed --noconfirm base-devel git
        pacman -S --needed --noconfirm mingw-w64-x86_64-toolchain \
                      mingw-w64-x86_64-cmake \
                      mingw-w64-x86_64-gstreamer \
                      mingw-w64-x86_64-gst-libav \
                      mingw-w64-x86_64-gst-plugins-bad \
                      mingw-w64-x86_64-gst-plugins-base \
                      mingw-w64-x86_64-gst-plugins-good \
                      mingw-w64-x86_64-gst-plugins-ugly \
                      mingw-w64-x86_64-gtest \
                      mingw-w64-x86_64-curl
      fi

    elif [[ "$unamestr" =~ ^MINGW32 ]]; then
      if [[ ! -d ${MINGW_PREFIX}/lib/gstreamer-1.0 ]]; then
        echo "Installing dependencies"
        pacman -S --needed --noconfirm base-devel git
        pacman -S --needed --noconfirm mingw-w64-i686-toolchain \
                      mingw-w64-i686-cmake \
                      mingw-w64-i686-gstreamer \
                      mingw-w64-i686-gst-libav \
                      mingw-w64-i686-gst-plugins-bad \
                      mingw-w64-i686-gst-plugins-base \
                      mingw-w64-i686-gst-plugins-good \
                      mingw-w64-i686-gst-plugins-ugly \
                      mingw-w64-i686-gtest \
                      mingw-w64-i686-curl
      fi
    fi

elif [[ "$unamestr" == 'Darwin' ]]; then
   PLATFORM='mac'
   echo "======= make sure the following libraries have been installed (library name from homebrew) ======="
   echo "* pkg-config"
   echo "* openssl"
   echo "* cmake"
   echo "* gstreamer"
   echo "* gst-plugins-base"
   echo "* gst-plugins-good"
   echo "* gst-plugins-bad"
   echo "* gst-plugins-ugly"
   echo "* log4cplus"
   echo "* libsrtp2"

else
   PLATFORM='unknown'
   echo "Required libraries for $unamestr unknown"
fi

# --------- build + install libs ----------------------------------------------

# log4cplus
if [[ "$PLATFORM" == 'mingw' ]] && [[ $build_producer == TRUE ]]; then
  # mingw doesnt have prebuilt log4cplus
  echo "Checking log4cplus at ${MINGW_PREFIX}/lib/liblog4cplus.dll.a"
  if [ ! -f ${MINGW_PREFIX}/lib/liblog4cplus.dll.a ]; then
    echo "log4cplus lib not found. Installing"
    if [ ! -f $DOWNLOADS/log4cplus-1.2.0.tar.xz ]; then
      cd $DOWNLOADS
      curl -L "https://github.com/log4cplus/log4cplus/releases/download/REL_1_2_0/log4cplus-1.2.0.tar.xz" -o "log4cplus-1.2.0.tar.xz"
    fi
    cd $DOWNLOADS
    tar -xvf log4cplus-1.2.0.tar.xz
    cd $DOWNLOADS/log4cplus-1.2.0
    if [ "${MINGW_PREFIX}" = "/mingw32" ]; then
      echo "Building 32 bit version of liblog4cplus.dll.a"
      export CXXFLAGS="-m32"
      export LDFLAGS="-m32"
    fi
    ./configure --prefix=${MINGW_PREFIX}
    make
    make install
  fi
fi

if [[ $build_test == TRUE ]]; then
  echo "Checking googletest at $DOWNLOADS"
  # mingw has prebuilt gtest
  if [[ "$PLATFORM" != 'mingw' ]]; then
    if [ ! -f $DOWNLOADS/local/lib/libgtest.* ]; then
      echo "gtest lib not found. Installing"
      if [ ! -d $DOWNLOADS/googletest-release-1.8.0 ]; then
        cd $DOWNLOADS
        $SYS_CURL -L "https://github.com/google/googletest/archive/release-1.8.0.tar.gz" -o "google-test-1.8.0.gz"
        tar -xvf google-test-1.8.0.gz
      fi
      cd $DOWNLOADS/googletest-release-1.8.0
      cmake -DCMAKE_INSTALL_PREFIX=$DOWNLOADS/local .
      make -j $max_parallel && make install
    fi
    env_var="$env_var KVS_GTEST_ROOT=$DOWNLOADS/local"
  fi
fi

 


if [ -d $DOWNLOADS/local/lib/gstreamer-1.0 ] && [ $build_gst_artifact == TRUE ]; then
  echo "Please remove $DOWNLOADS/local or the Gstreamer there may conflict with system Gstreamer."
  exit 0
fi

#------------ jsmn ------------------------------------------------------------------------------------------------
  echo "Checking jsmn at $DOWNLOADS/local/lib/libjsmn.a"
  if [ ! -f $DOWNLOADS/local/lib/libjsmn.* ]; then
    echo "jsmn lib not found. Installing"
    if [ ! -f $DOWNLOADS/jsmn.tar.gz ]; then
      cd $DOWNLOADS
      $SYS_CURL -L "https://github.com/zserge/jsmn/archive/v1.0.0.tar.gz" -o "jsmn.tar.gz"
    fi
    cd $DOWNLOADS
    tar -xvf jsmn.tar.gz
    cd $DOWNLOADS/jsmn-1.0.0
    make clean && make CFLAGS="-fPIC" -j $max_parallel
    if [ ! -d "$DOWNLOADS/local/lib" ]; then
      mkdir "$DOWNLOADS/local/lib"
    fi
    if [ ! -d "$DOWNLOADS/local/include" ]; then
      mkdir "$DOWNLOADS/local/include"
    fi
    cp libjsmn.a $DOWNLOADS/local/lib
    cp jsmn.h $DOWNLOADS/local/include
  fi
fi

 
#------------ libWebSockets -----------------------------------------#

echo "Checking libWebSockets at $DOWNLOADS/local/lib/libwebsockets.a"

if [ ! -f $DOWNLOADS/local/lib/libwebsockets.* ]; then
  echo "libWebSockets not found. Installing"
  if [ ! -f $DOWNLOADS/libWebSockets.tar.gz ]; then
    cd $DOWNLOADS
    $SYS_CURL -L "https://github.com/warmcat/libwebsockets/archive/v3.2.0.tar.gz" -o "libWebSockets.tar.gz"
  fi
 
  cd $DOWNLOADS
  tar -xvf libWebSockets.tar.gz
  cd $DOWNLOADS/libwebsockets-3.2.0
  
  rm -rf build
  mkdir build
  cd build
  
  cmake .. -DCMAKE_INSTALL_PREFIX:PATH=$DOWNLOADS/local/ \
           -DOPENSSL_ROOT_DIR=$DOWNLOADS/local/include/ \
           -DOPENSSL_INCLUDE_DIR=$DOWNLOADS/local/include/ \
           -DCMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE=$DOWNLOADS/local/include/ \
           -DLWS_OPENSSL_INCLUDE_DIRS=$DOWNLOADS/local/include/openssl \
           -DLWS_WITH_HTTP2=1 \
           -DLWS_HAVE_HMAC_CTX_new=1 \
           -DLWS_HAVE_SSL_EXTRA_CHAIN_CERTS=1 \
           -DLWS_HAVE_OPENSSL_ECDH_H=1 \
           -DLWS_HAVE_EVP_MD_CTX_free=1 \
           -DLWS_WITHOUT_SERVER=1 \
           -DLWS_WITHOUT_TESTAPPS=1 \
           -DLWS_WITH_THREADPOOL=1 \
           -DLWS_WITHOUT_TEST_SERVER_EXTPOLL=1 \
           -DLWS_WITHOUT_TEST_PING=1 \
           -DLWS_WITHOUT_TEST_CLIENT=1 \
           -DLWS_WITH_STATIC=1 \
           -DLWS_WITH_SHARED=0 \
           -DLWS_STATIC_PIC=1 \
           -DLWS_WITH_ZLIB=0 \
           -DCMAKE_BUILD_TYPE=RELEASE 
 
  make -j $max_parallel
  make install
fi


## --------- build kinesis video ----------------------------------------------
cd $KINESIS_VIDEO_WEBRTC_ROOT
clean_up

if [[ ! -z $env_var ]]; then
  export $env_var
fi

cmake_args="-DCMAKE_BUILD_TYPE=${build_type} -DUSE_SYS_LIBRARIES=TRUE \
  -DBUILD_TEST=${build_test} -DBUILD_GST_ARTIFACT=${build_gst_artifact} -DBUILD_PRODUCER=${build_producer} \
  -DBUILD_JNI=${build_jni_only}"

if [[ $on_rpi == TRUE ]]; then
  cmake_args="${cmake_args} -DCONSTRAINED_DEVICE=TRUE"
fi

if [[ "$PLATFORM" == 'mingw' ]]; then
  cmake -G "MSYS Makefiles" ${cmake_args} .
else
  cmake ${cmake_args} .
fi

make -j ${max_parallel}

echo "**********************************************************"
echo Success!!!
echo "**********************************************************"
